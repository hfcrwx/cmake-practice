cmake_minimum_required(VERSION 2.6)
# message(STATUS ": " ${})
message(STATUS "CMAKE_MAJOR_VERSION: " ${CMAKE_MAJOR_VERSION})
message(STATUS "CMAKE_MINOR_VERSION: " ${CMAKE_MINOR_VERSION})
message(STATUS "CMAKE_PATCH_VERSION: " ${CMAKE_PATCH_VERSION})
message(STATUS "CMAKE_SYSTEM: " ${CMAKE_SYSTEM})
message(STATUS "CMAKE_SYSTEM_NAME: " ${CMAKE_SYSTEM_NAME})
message(STATUS "CMAKE_SYSTEM_VERSION: " ${CMAKE_SYSTEM_VERSION})
message(STATUS "CMAKE_SYSTEM_PROCESSOR: " ${CMAKE_SYSTEM_PROCESSOR})
message(STATUS "UNIX: " ${UNIX})
message(STATUS "WIN32: " ${WIN32})
message(STATUS "CMAKE_C_FLAGS: " ${CMAKE_C_FLAGS})

message(STATUS "MY: " ${MY})
if(MY)
    message(STATUS "if MY ")
else(MY)
    message(STATUS "else MY ")
endif(MY)

if(IS_DIRECTORY /home)
    message(STATUS "IS_DIRECTORY")
endif(IS_DIRECTORY /home)

if("1" LESS 2)
    message(STATUS "1 < 2")
endif("1" LESS 2)

if(DEFINED x)
    message(STATUS "DEFINED x")
endif(DEFINED x)

if(WIN32)
    message(STATUS "win32")
else()
    message(STATUS "else")
endif()

if(WIN32)
    message(STATUS "win32")
elseif(UNIX)
    message(STATUS "elseif")
endif()

project(TST)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
aux_source_directory(. SRC_LIST)
message(STATUS "SRC_LIST: " ${SRC_LIST})
foreach(F ${SRC_LIST})
    message(${F})
endforeach()

add_executable(main ${SRC_LIST})

foreach(VAR RANGE 10)
    message(${VAR})
endforeach()

foreach(A RANGE 5 15 3)
    message(${A})
endforeach()
